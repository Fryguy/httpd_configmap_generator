#! /usr/bin/env ruby
#
# Script for configuring container with external authentication
#
# Stdout: standard processing messages ...
# Stderr: any errors during configuration ...
# -o filename: for the generated auth-config map.
#

Dir.chdir(File.join(__dir__, "..")) { require 'bundler/setup' }

require "trollop"
require "httpd_authconfig"

CMD = File.basename($PROGRAM_NAME)
VERSION = HttpdAuthConfig::VERSION.freeze

def error_msg(msg)
  $stderr.puts msg
  exit 1
end

module AuthConfig
  class Cli
    def run_configure(auth_type, cmd_options)
      begin
        auth_config = HttpdAuthConfig.new_config(auth_type)
      rescue => err
        error_msg(err.to_s)
      end

      opts = Trollop.options do
        version "#{CMD} #{VERSION} - Httpd External Auth Configuration script"
        banner <<-EOS
      #{version}

      Usage: #{CMD} auth_type [options]

      #{CMD} options are:
      EOS
        opt :version, "Version of the #{CMD} command",
            :default => "", :short => "-V"
        auth_config.required_options.each do |key, key_options|
          opt key, key_options[:description], AuthConfig::Cli.options_for(key_options, true)
        end
        auth_config.optional_options.each do |key, key_options|
          opt key, key_options[:description], AuthConfig::Cli.options_for(key_options)
        end
      end

      auth_config.configure(opts)
    end

    def self.options_for(key_options, required = false)
      options = {:default => key_options[:default] || ""}
      options[:required] = true if required
      options[:short]    = key_options[:short] if key_options[:short]
      options
    end
  end
end

if ARGV.empty?
  error_msg "
Usage: #{CMD} auth_type [--help | options]
Supported auth_type: #{HttpdAuthConfig.supported_auth_types.join(', ')}
"
else
  AuthConfig::Cli.new.run_configure(ARGV.shift, ARGV)
end
